from numba import njit
    
@njit
def f_steady(x,p):
    
    ### This code was generated by Python.
    ### Eichenbaum, Rebelo and Trabandt Model with Resistant Virus Strain.
    
    from sympy import DiracDelta
    from preprocessor.condition import IfThenElse,IfThen,Derivative,Subs,Positive,Negative,myzif
    from preprocessor.functions import Heaviside

    import numpy as np
    from numpy import log,exp,sin,cos,tan,sqrt,sign
    from numpy import maximum as Max, minimum as Min, abs as Abs
    
    # Initialize variables
    y__ = x[0]
    k__ = x[1]
    n__ = x[2]
    w__ = x[3]
    rk__ = x[4]
    x__ = x[5]
    c__ = x[6]
    s__ = x[7]
    s1__ = x[8]
    s2__ = x[9]
    i__ = x[10]
    i1__ = x[11]
    i2__ = x[12]
    r__ = x[13]
    r1__ = x[14]
    r2__ = x[15]
    v__ = x[16]
    ns__ = x[17]
    ni__ = x[18]
    nr__ = x[19]
    cs__ = x[20]
    ci__ = x[21]
    cr__ = x[22]
    tau__ = x[23]
    tau1__ = x[24]
    tau2__ = x[25]
    lambtilde__ = x[26]
    lamtau__ = x[27]
    lami__ = x[28]
    lams__ = x[29]
    lamr__ = x[30]
    dd__ = x[31]
    pop__ = x[32]
    Rb__ = x[33]
    pie__ = x[34]
    mc__ = x[35]
    F__ = x[36]
    Kf__ = x[37]
    rr__ = x[38]
    pbreve__ = x[39]
    yF__ = x[40]
    kF__ = x[41]
    nF__ = x[42]
    wF__ = x[43]
    rkF__ = x[44]
    xF__ = x[45]
    cF__ = x[46]
    sF__ = x[47]
    sF1__ = x[48]
    sF2__ = x[49]
    iF__ = x[50]
    iF1__ = x[51]
    iF2__ = x[52]
    rF__ = x[53]
    rF1__ = x[54]
    rF2__ = x[55]
    vF__ = x[56]
    nsF__ = x[57]
    niF__ = x[58]
    nrF__ = x[59]
    csF__ = x[60]
    ciF__ = x[61]
    crF__ = x[62]
    tauF__ = x[63]
    tauF1__ = x[64]
    tauF2__ = x[65]
    lambtildeF__ = x[66]
    lamtauF__ = x[67]
    lamiF__ = x[68]
    lamsF__ = x[69]
    lamrF__ = x[70]
    ddF__ = x[71]
    popF__ = x[72]
    RbF__ = x[73]
    pieF__ = x[74]
    mcF__ = x[75]
    FF__ = x[76]
    KfF__ = x[77]
    rrF__ = x[78]
    pbreveF__ = x[79]
    ei1__ = x[80]
    ei2__ = x[81]
    ed__ = x[82]


    # Set parameters
    xi = p[0]
    rpi = p[1]
    rx = p[2]
    gam = p[3]
    pi1 = p[4]
    pi2 = p[5]
    pi3 = p[6]
    mult = p[7]
    mult2 = p[8]
    pir = p[9]
    pid = p[10]
    betta = p[11]
    i_ini = p[12]
    d_ini = p[13]
    A = p[14]
    theta = p[15]
    alfa = p[16]
    inc_target = p[17]
    n_target = p[18]
    delta = p[19]
    g_ss = p[20]
    eta = p[21]
    xi_flex = p[22]
    pie_ss = p[23]
    rr_ss = p[24]
    Rb_ss = p[25]
    lockdown_policy = p[26]
    sigma = p[27]
    theta_lockdown = p[28]
    vaccination_policy = p[29]
    vaccination_rate = p[30]
    virus_resistant_strain = p[31]
    virus_variant_start = p[32]

    # Function:

    function = list()
    function.append(y__ - A*n__**alfa*k__**(1 - alfa)*pbreve__)
    function.append(mc__ - w__**alfa*rk__**(1 - alfa)*alfa**(-alfa)*(1 - alfa)**(-(1 - alfa))/A)
    function.append(w__ - A*n__**(-1 + alfa)*k__**(1 - alfa)*mc__*alfa)
    function.append(k__ - (x__ + k__*(1 - delta)))
    function.append(y__ - (c__ + g_ss + x__))
    function.append(n__ - (i1__*ni__ + nr__*r1__ + ns__*s1__))
    function.append(c__ - (i1__*ci__ + r1__*cr__ + s1__*cs__))
    function.append(tau1__ - (pi3*i1__*s1__ + pi1*i1__*s1__*cs__*ci__ + pi2*i1__*ni__*ns__*s1__)*(1 - theta_lockdown*lockdown_policy)**2)
    function.append(tau2__ - (pi3*i2__*mult*s2__ + pi1*i2__*s2__*cs__*ci__ + pi2*i2__*ni__*ns__*s2__)*(1 - theta_lockdown*lockdown_policy)**2*virus_resistant_strain)
    function.append(tau__ - (tau1__ + tau2__))
    function.append(s1__ - (s1__ - tau1__ - v__))
    function.append(s2__ - (s2__ - tau2__))
    function.append(s__ - IfThenElse(s__ - tau__ - v__, s__ - tau__ - v__, 0))
    function.append(i1__ - (ei1__ + i1__ + tau1__ - (pid + pir)*i1__))
    function.append(i2__ - (ei2__ + i2__ + (tau2__ - i2__*(pir + pid/mult2))*virus_resistant_strain))
    function.append(i__ - (i1__ + i2__))
    function.append(r1__ - (r1__ + v__ + pir*i1__))
    function.append(r2__ - (r2__ + pir*i2__))
    function.append(r__ - (r1__ + r2__))
    function.append(v__ - s1__*vaccination_rate)
    function.append(dd__ - (dd__ + ed__ + pid*i1__ + pid*i2__/mult2))
    function.append(pop__ - (pop__ - pid*i1__ - pid*i2__/mult2))
    function.append(lamtau__ - (-cs__ + lamtau__ + (lambtilde__ - pi1*i1__*ci__*lamtau__)**(-1)))
    function.append(ci__ - lambtilde__**(-1))
    function.append(cr__ - lambtilde__**(-1))
    function.append(ns__ - (w__*lambtilde__ + pi2*i1__*ni__*lamtau__)*(1 - theta_lockdown*lockdown_policy)/theta)
    function.append(ni__ - w__*lambtilde__*(1 - theta_lockdown*lockdown_policy)/theta)
    function.append(nr__ - w__*lambtilde__/theta)
    function.append(rk__ - (-lambtilde__ + rk__ + betta*lambtilde__*(1 - delta + rk__)))
    function.append(lami__ - (lams__ + lamtau__))
    function.append(cs__ - (cs__ + lams__ - lams__/betta + lambtilde__*(-cs__ + w__*ns__) + (-1/2)*ns__**2*theta + (pi3*i1__ + pi1*i1__*cs__*ci__ + pi2*i1__*ni__*ns__)*lamtau__ + log(cs__)))
    function.append(ci__ - (ci__ - lami__/betta + lambtilde__*(-ci__ + w__*ni__) + (-1/2)*ni__**2*theta + pir*lamr__ + (1 - pid - pir)*lami__ + log(ci__)))
    function.append(cr__ - (cr__ + lamr__ - lamr__/betta + lambtilde__*(-cr__ + w__*nr__) + (-1/2)*nr__**2*theta + log(cr__)))
    function.append(lambtilde__ - Rb__*betta*lambtilde__/pie__)
    function.append(rr__ - Rb__/pie__)
    function.append(Kf__ - (xi*Kf__*betta*pie__**(gam/(-1 + gam)) + y__*gam*mc__*lambtilde__))
    function.append(F__ - (y__*lambtilde__ + xi*F__*betta*pie__**((-1 + gam)**(-1))))
    function.append(x__ - (-Kf__ + x__ + F__*((1 - xi*pie__**((-1 + gam)**(-1)))/(1 - xi))**(-(-1 + gam))))
    function.append(pbreve__ - ((1 - xi)*((1 - xi*pie__**((-1 + gam)**(-1)))/(1 - xi))**gam + xi*pie__**(gam/(-1 + gam))/pbreve__)**(-1))
    function.append(Rb__ - (rr_ss + rpi*log(pie__/pie_ss) + rx*log(y__/yF__)))
    function.append(yF__ - A*kF__**(1 - alfa)*nF__**alfa*pbreveF__)
    function.append(mcF__ - alfa**(-alfa)*wF__**alfa*(1 - alfa)**(-(1 - alfa))*rkF__**(1 - alfa)/A)
    function.append(wF__ - A*kF__**(1 - alfa)*nF__**(-1 + alfa)*alfa*mcF__)
    function.append(kF__ - (xF__ + kF__*(1 - delta)))
    function.append(yF__ - (cF__ + g_ss + xF__))
    function.append(nF__ - (iF1__*niF__ + rF1__*nrF__ + sF1__*nsF__))
    function.append(cF__ - (crF__*rF1__ + iF1__*ciF__ + sF1__*csF__))
    function.append(tauF1__ - (pi3*sF1__*iF1__ + pi1*sF1__*iF1__*csF__*ciF__ + pi2*sF1__*iF1__*niF__*nsF__)*(1 - theta_lockdown*lockdown_policy)**2)
    function.append(tauF2__ - (pi3*mult*sF2__*iF2__ + pi1*sF2__*iF2__*csF__*ciF__ + pi2*sF2__*iF2__*niF__*nsF__)*(1 - theta_lockdown*lockdown_policy)**2*virus_resistant_strain)
    function.append(tauF__ - (tauF1__ + tauF2__))
    function.append(sF1__ - (sF1__ - tauF1__ - vF__))
    function.append(sF2__ - (sF2__ - tauF2__))
    function.append(sF__ - IfThenElse(sF__ - tauF__ - vF__, sF__ - tauF__ - vF__, 0))
    function.append(iF1__ - (ei1__ + iF1__ + tauF1__ - (pid + pir)*iF1__))
    function.append(iF2__ - (ei2__ + iF2__ + (tauF2__ - iF2__*(pir + pid/mult2))*virus_resistant_strain))
    function.append(iF__ - (iF1__ + iF2__))
    function.append(rF1__ - (rF1__ + vF__ + pir*iF1__))
    function.append(rF2__ - (rF2__ + pir*iF2__))
    function.append(rF__ - (rF1__ + rF2__))
    function.append(vF__ - sF1__*vaccination_rate)
    function.append(ddF__ - (ddF__ + ed__ + pid*iF1__ + pid*iF2__/mult2))
    function.append(popF__ - (popF__ - pid*iF1__ - pid*iF2__/mult2))
    function.append(lamtauF__ - (-csF__ + lamtauF__ + (lambtildeF__ - pi1*iF1__*ciF__*lamtauF__)**(-1)))
    function.append(ciF__ - lambtildeF__**(-1))
    function.append(crF__ - lambtildeF__**(-1))
    function.append(nsF__ - (wF__*lambtildeF__ + pi2*iF1__*niF__*lamtauF__)*(1 - theta_lockdown*lockdown_policy)/theta)
    function.append(niF__ - wF__*(1 - theta_lockdown*lockdown_policy)*lambtildeF__/theta)
    function.append(nrF__ - wF__*lambtildeF__/theta)
    function.append(rkF__ - (-lambtildeF__ + rkF__ + (1 - delta + rkF__)*betta*lambtildeF__))
    function.append(lamiF__ - (lamsF__ + lamtauF__))
    function.append(csF__ - (csF__ + lamsF__ - lamsF__/betta + lamtauF__*(pi3*iF1__ + pi1*iF1__*csF__*ciF__ + pi2*iF1__*niF__*nsF__) + (-1/2)*theta*nsF__**2 + (-csF__ + wF__*nsF__)*lambtildeF__ + log(csF__)))
    function.append(ciF__ - (ciF__ - lamiF__/betta + pir*lamrF__ + (-1/2)*theta*niF__**2 + (-ciF__ + wF__*niF__)*lambtildeF__ + (1 - pid - pir)*lamiF__ + log(ciF__)))
    function.append(crF__ - (crF__ + lamrF__ - lamrF__/betta + (-1/2)*theta*nrF__**2 + (-crF__ + wF__*nrF__)*lambtildeF__ + log(crF__)))
    function.append(lambtildeF__ - betta*RbF__*lambtildeF__/pieF__)
    function.append(rrF__ - RbF__/pieF__)
    function.append(KfF__ - (betta*KfF__*pieF__**(gam/(-1 + gam))*xi_flex + gam*yF__*mcF__*lambtildeF__))
    function.append(FF__ - (yF__*lambtildeF__ + FF__*betta*pieF__**((-1 + gam)**(-1))*xi_flex))
    function.append(KfF__ - FF__*((1 - pieF__**((-1 + gam)**(-1))*xi_flex)/(1 - xi_flex))**(-(-1 + gam)))
    function.append(pbreveF__ - (((1 - pieF__**((-1 + gam)**(-1))*xi_flex)/(1 - xi_flex))**gam*(1 - xi_flex) + pieF__**(gam/(-1 + gam))*xi_flex/pbreveF__)**(-1))
    function.append(RbF__ - (Rb_ss + rpi*log(pieF__/pie_ss)))

    return np.array(function)
